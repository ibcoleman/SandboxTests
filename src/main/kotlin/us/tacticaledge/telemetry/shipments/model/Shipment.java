package us.tacticaledge.telemetry.shipments.model;

import java.util.Date;

import io.objectbox.BoxStore;
import io.objectbox.annotation.Backlink;
import io.objectbox.annotation.Entity;
import io.objectbox.annotation.Id;
import io.objectbox.annotation.Index;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.relation.ToMany;

@Entity
public class Shipment {

    @Id
    long uid = 0L;

    public String shipmentURI = "";

    @Index
    public String shipmentId;

    public String containerId;

    public String leadShipmentId;

    public String consignor;

    public String consignorDate;

    public String consignee;

    public String consigneeDate;

    public Boolean hasDeparted;

    public Boolean hasArrived;

    public String requiredDepartureDate;

    public String requiredDeliveryDate;

    public String rfidTagId;

    @Index
    public String sensorId;

    public Double latitude;

    public Double longitude;

    public String locationLastUpdated;

    public Double weight;

    public Double volume;

    public String commodityCode;

    public String commodityDescription;

    public String pointOfEmbarkation;

    public String pointOfDebarkation;

    public String organization;

    public Date lastModified;

    public Date created;

    public String dataSource;

    public String requestNumber;

    public String tmrNumber;

    public String orderNumber;

    @Backlink
    public ToMany<ShipmentItem> shipmentItems;

    @Backlink
    public ToMany<ShipmentLocation> shipmentLocations;

    @Backlink
    public ToMany<ShipmentNote> shipmentNotes;

    public String lastShipmentState;

    public String shipmentRisk;

    public Double maxTemperature;

    public Double minTemperature;

    //  @Convert(converter = StatusTypeConverter.class, dbType = String.class)
    public String status;

    public String poc;

    public String totalPieces;

    public Boolean isNew = true;

    /**
     * Used to resolve relations
     */
    @Internal
    transient BoxStore __boxStore;

    public Shipment() {}

    public Shipment(Shipment baseShipment) {
        updateValues(baseShipment);
    }

    @Internal
    /** This constructor was generated by ObjectBox and may change any time. */
    public Shipment(long uid, String shipmentURI, String shipmentId, String containerId, String leadShipmentId, String consignor, String consignorDate, String consignee, String consigneeDate,
            Boolean hasDeparted, Boolean hasArrived, String requiredDepartureDate, String requiredDeliveryDate, String rfidTagId, String sensorId, Double latitude, Double longitude,
            String locationLastUpdated, Double weight, Double volume, String commodityCode, String commodityDescription, String pointOfEmbarkation, String pointOfDebarkation, String organization,
            Date lastModified, Date created, String dataSource, String requestNumber, String tmrNumber, String orderNumber, String lastShipmentState, String shipmentRisk, Double maxTemperature,
            Double minTemperature, String status, String poc, String totalPieces) {
        this.uid = uid;
        this.shipmentURI = shipmentURI;
        this.shipmentId = shipmentId;
        this.containerId = containerId;
        this.leadShipmentId = leadShipmentId;
        this.consignor = consignor;
        this.consignorDate = consignorDate;
        this.consignee = consignee;
        this.consigneeDate = consigneeDate;
        this.hasDeparted = hasDeparted;
        this.hasArrived = hasArrived;
        this.requiredDepartureDate = requiredDepartureDate;
        this.requiredDeliveryDate = requiredDeliveryDate;
        this.rfidTagId = rfidTagId;
        this.sensorId = sensorId;
        this.latitude = latitude;
        this.longitude = longitude;
        this.locationLastUpdated = locationLastUpdated;
        this.weight = weight;
        this.volume = volume;
        this.commodityCode = commodityCode;
        this.commodityDescription = commodityDescription;
        this.pointOfEmbarkation = pointOfEmbarkation;
        this.pointOfDebarkation = pointOfDebarkation;
        this.organization = organization;
        this.lastModified = lastModified;
        this.created = created;
        this.dataSource = dataSource;
        this.requestNumber = requestNumber;
        this.tmrNumber = tmrNumber;
        this.orderNumber = orderNumber;
        this.lastShipmentState = lastShipmentState;
        this.shipmentRisk = shipmentRisk;
        this.maxTemperature = maxTemperature;
        this.minTemperature = minTemperature;
        this.status = status;
        this.poc = poc;
        this.totalPieces = totalPieces;
    }

    @Override
    public String toString() {
        return "us.tacticaledge.telemetry.shipments.model.Shipment{" +
                "uid=" + uid +
                ", shipmentURI='" + shipmentURI + '\'' +
                ", shipmentId='" + shipmentId + '\'' +
                ", containerId='" + containerId + '\'' +
                ", leadShipmentId='" + leadShipmentId + '\'' +
                ", consignor='" + consignor + '\'' +
                ", consignorDate='" + consignorDate + '\'' +
                ", consignee='" + consignee + '\'' +
                ", consigneeDate='" + consigneeDate + '\'' +
                ", hasDeparted=" + hasDeparted +
                ", hasArrived=" + hasArrived +
                ", requiredDepartureDate='" + requiredDepartureDate + '\'' +
                ", requiredDeliveryDate='" + requiredDeliveryDate + '\'' +
                ", rfidTagId='" + rfidTagId + '\'' +
                ", sensorId='" + sensorId + '\'' +
                ", latitude=" + latitude +
                ", longitude=" + longitude +
                ", locationLastUpdated='" + locationLastUpdated + '\'' +
                ", weight=" + weight +
                ", volume=" + volume +
                ", commodityCode='" + commodityCode + '\'' +
                ", commodityDescription='" + commodityDescription + '\'' +
                ", pointOfEmbarkation='" + pointOfEmbarkation + '\'' +
                ", pointOfDebarkation='" + pointOfDebarkation + '\'' +
                ", organization='" + organization + '\'' +
                ", lastModified='" + lastModified + '\'' +
                ", created='" + created + '\'' +
                ", dataSource='" + dataSource + '\'' +
                ", requestNumber='" + requestNumber + '\'' +
                ", tmrNumber='" + tmrNumber + '\'' +
                ", orderNumber='" + orderNumber + '\'' +
                ", shipmentItems=" + shipmentItems +
                ", shipmentLocations=" + shipmentLocations +
                ", shipmentNotes=" + shipmentNotes +
                ", lastShipmentState='" + lastShipmentState + '\'' +
                ", shipmentRisk='" + shipmentRisk + '\'' +
                ", maxTemperature=" + maxTemperature +
                ", minTemperature=" + minTemperature +
                ", status='" + status + '\'' +
                ", poc='" + poc + '\'' +
                ", totalPieces='" + totalPieces + '\'' +
                '}';
    }

    public void updateValues(Shipment newShipment) {
        this.shipmentURI = newShipment.shipmentURI;
        this.containerId = newShipment.containerId;
        this.leadShipmentId = newShipment.leadShipmentId;
        this.consignor = newShipment.consignor;
        this.consignorDate = newShipment.consignorDate;
        this.consignee = newShipment.consignee;
        this.consigneeDate = newShipment.consigneeDate;
        this.hasDeparted = newShipment.hasDeparted;
        this.hasArrived = newShipment.hasArrived;
        this.requiredDepartureDate = newShipment.requiredDepartureDate;
        this.requiredDeliveryDate = newShipment.requiredDeliveryDate;
        this.rfidTagId = newShipment.rfidTagId;
        this.sensorId = newShipment.sensorId;
        this.latitude = newShipment.latitude;
        this.longitude = newShipment.longitude;
        this.locationLastUpdated = newShipment.locationLastUpdated;
        this.weight = newShipment.weight;
        this.volume = newShipment.volume;
        this.commodityCode = newShipment.commodityCode;
        this.commodityDescription = newShipment.commodityDescription;
        this.pointOfEmbarkation = newShipment.pointOfEmbarkation;
        this.pointOfDebarkation = newShipment.pointOfDebarkation;
        this.organization = newShipment.organization;
        this.lastModified = newShipment.lastModified;
        this.created = newShipment.created;
        this.dataSource = newShipment.dataSource;
        this.requestNumber = newShipment.requestNumber;
        this.tmrNumber = newShipment.tmrNumber;
        this.orderNumber = newShipment.orderNumber;
        this.lastShipmentState = newShipment.lastShipmentState;
        this.shipmentRisk = newShipment.shipmentRisk;
        this.maxTemperature = newShipment.maxTemperature;
        this.minTemperature = newShipment.minTemperature;
        this.status = newShipment.status;
        this.poc = newShipment.poc;
        this.totalPieces = newShipment.totalPieces;

        if (this.shipmentItems != null && !this.shipmentItems.isEmpty()) {
            for (ShipmentItem si : this.shipmentItems) {
            }
        }
        if (newShipment.shipmentItems != null && !newShipment.shipmentItems.isEmpty()) {
            for (ShipmentItem si : newShipment.shipmentItems) {
            }
        }
        if (this.shipmentItems != null) {
            this.shipmentItems.clear();
            if (newShipment.shipmentItems != null) {
                this.shipmentItems.addAll(newShipment.shipmentItems);
            }
        }

        this.shipmentLocations.clear();
        this.shipmentLocations.addAll(newShipment.shipmentLocations);

        this.shipmentNotes.clear();
        this.shipmentNotes.addAll(newShipment.shipmentNotes);

    }

}
